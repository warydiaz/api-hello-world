name: Deploy to OpenShift

on:
  workflow_run:
    workflows:
      - Build and Push to Quay.io
    types:
      - completed

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Instalar cliente OpenShift
      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
          tar -xvf openshift-client-linux.tar.gz -C /usr/local/bin
          chmod +x /usr/local/bin/oc

      # 3. Log in to OpenShift
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}

      # 4. Set OpenShift project/namespace
      - name: Set OpenShift project
        run: |
          oc project ${{ secrets.OPENSHIFT_PROJECT }}

      # 5. Extraer commit SHA y fecha para la imagen
      - name: Set image tag
        id: set_tag
        run: |
          COMMIT_DATE=$(date -u +"%Y%m%d")
          COMMIT_SHA=${{ github.event.workflow_run.head_sha }}
          echo "IMAGE_TAG=${COMMIT_DATE}_${COMMIT_SHA}" >> $GITHUB_ENV

      # 6. Generar archivo deployment.yaml
      - name: Generate deployment and service YAML
        run: |
          cat <<EOF > deployment-service.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-hello-wworld
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: api-hello-wworld
            template:
              metadata:
                labels:
                  app: api-hello-wworld
              spec:
                containers:
                - name: api-hello-wworld
                  image: quay.io/${{ secrets.QUAY_USERNAME }}/api-hello-wworld:${{ env.IMAGE_TAG }}
                  ports:
                  - containerPort: 8080

          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: api-hello-wworld
          spec:
            selector:
              app: api-hello-wworld
            ports:
            - protocol: TCP
              port: 8080
              targetPort: 8080
          EOF

      # 7. Aplicar el deployment y el servicio en OpenShift
      - name: Apply Kubernetes manifest
        run: |
          oc apply -f deployment-service.yaml

      # 8. Verificar el despliegue
      - name: Verify deployment
        run: |
          oc rollout status deployment/api-hello-wworld

      # 9. Exponer el servicio via Route (si no existe)
      - name: Expose the service via Route
        run: |
          if ! oc get route api-hello-wworld-route &>/dev/null; then
            oc expose svc/api-hello-wworld --name=api-hello-wworld-route
          else
            echo "Route api-hello-wworld-route already exists. Skipping..."
          fi

      # 10. Obtener la URL de la aplicaciÃ³n y guardarla como artifact
      - name: Save Application URL
        run: |
          APP_URL=$(oc get route api-hello-wworld-route -o jsonpath='{.spec.host}')
          echo "APP_URL=http://$APP_URL" > app-url.txt

      - name: Upload Application URL
        uses: actions/upload-artifact@v3
        with:
          name: app-url
          path: app-url.txt
